<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);
require_once("repository.php");

abstract class Sales {
    protected $price;
    protected $strategyPayment;

    public function __construct($price, Strategypayment $strategyPayment){
        $this->price = $price;
        $this->strategyPayment = $strategyPayment;
    }

    public function performSale (  ){
        $this->strategyPayment->performSale($this);
    }
    abstract function setTax();
    abstract function getTax();
    abstract function getPrice();
 
}


class Shoes extends Sales {

    public $tax;
    public function __construct($price, Strategypayment $strategyPayment ){
        parent::__construct($price, $strategyPayment);
        $this->setTax();
    }
    public function setTax(){
        $this->tax = 2;
    }

    public function getTax(){
        return $this->tax;
    }
    public function getPrice(){
        return $this->price;
    }
}


abstract class Strategypayment {
    
    public function performSale( Sales $sales) {
       $transaction =  (($sales->getTax() / 100) * $sales->getPrice()) + $sales->getPrice();
       $subtotal = $this->addTransactionFee() / 100;
       $fees =  $subtotal * $transaction;
       $total = $transaction + $fees;
       return $total;

    } 
    abstract function addTransactionFee(); 
}



class Visa extends Strategypayment {

    public function addTransactionFee () {
        return 5;
    }

    public function performSale(Sales $sales)
    {
        return parent::performSale($sales); // TODO: Change the autogenerated stub
    }

}


class Master extends Strategypayment {

    public function addTransactionFee () {
        return 10;
    }

    public function performSale(Sales $sales)
    {
        return parent::performSale($sales); // TODO: Change the autogenerated stub
    }
}

$strategyPayment = new Master();
$zapato = new Shoes(3000,$strategyPayment);
echo $strategyPayment->performSale($zapato);