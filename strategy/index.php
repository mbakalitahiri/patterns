<?php

ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);
require_once("repository.php");


abstract class Sale
{
    private $strategyPayment;
    private $repository;
    private $product;

    public function __construct($productId, StrategyPayment $strategyPayment )
    {
        $this->strategyPayment = $strategyPayment;
        $this->repository = new Repository();
        $this->product = $this->repository->executeQuery($productId);
    }

    protected function getPrice()
    {
        return $this->strategyPayment->calculate($this);
    }

    abstract function getType();

    function getProduct()
    {
        return $this->product;
    }

}


class Book extends Sale
{

    public function __construct($productId, StrategyPayment $strategyPayment)
    {
        parent::__construct($productId, $strategyPayment);
    }

    public function getType()
    {
        return " This is a book";
    }

    public function getProduct()
    {
        return parent::getProduct();
    }

    public function getPrice()
    {
        return parent::getPrice(); // TODO: Change the autogenerated stub
    }

}


class Bodybuilding extends Sale
{

    public function __construct($productId, StrategyPayment $strategyPayment)
    {
        parent::__construct($productId, $strategyPayment);
    }

    public function getType()
    {
        return " This is a bodybuilding product";
    }

    public function getProduct()
    {

        return parent::getProduct();
    }

    public function getPrice()
    {
        return parent::getPrice();
    }

}


abstract class StrategyPayment
{

    public function calculate(Sale $sale)
    {
         return $sale->getProduct()[0]["price"] * $this->price();
    }

    protected function price()
    {

    }
}


class BookStrategicPayment extends StrategyPayment
{

    public function price()
    {
        return 2;
    }

}


class BodyBuildingStrategicPayment extends StrategyPayment
{

    public function price()
    {
        return 5;
    }



}

$book = new Book(1, new BookStrategicPayment());
$protein = new Bodybuilding(1, new BodyBuildingStrategicPayment());

 echo $book->getPrice();
 echo $book->getType();
echo "<br>";

echo $protein->getPrice();
echo $protein->getType();



